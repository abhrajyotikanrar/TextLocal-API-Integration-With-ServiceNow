<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_277835_textlocal.TextLocalAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>TextLocalAPI</name>
        <script><![CDATA[var TextLocalAPI = Class.create();
TextLocalAPI.prototype = {
	API_KEY : gs.getProperty('x_277835_textlocal.api.key'),
	SMS_SENDER : gs.getProperty('x_277835_textlocal.api.sender'),
	ENABLE_OUTGOING_SMS : gs.getProperty('x_277835_textlocal.enable.outgoing.sms'),
	
    initialize: function() {
		
    },
	
	sendSmsGetMethod : function(numbers, message){
		return this.sendSmsRequest(numbers, message, 'Send SMS - GET');
	},
	
	sendSmsPostMethod : function(numbers, message){
		return this.sendSmsRequest(numbers, message, 'Send SMS - POST');
	},
	
	sendSmsRequest : function(numbers, message, httpMethod){
		var returnValue = '';
		var grTransactions = new GlideRecord('x_277835_textlocal_sms_transactions');
		grTransactions.initialize();
		grTransactions.requested_user = gs.getUserID();
		grTransactions.message = message;
		grTransactions.recipient_numbers = numbers;
		grTransactions.sender_name = this.SMS_SENDER;
		
		if(this.ENABLE_OUTGOING_SMS.toString() == 'false'){
			grTransactions.blocked = true;
			gs.info('SMS sent to ' + numbers + ' is blocked. Enable property x_277835_textlocal.enable.outgoing.sms to enable outgoing SMS.');
		}
		else{
			try {
				var r = new sn_ws.RESTMessageV2('x_277835_textlocal.TextLocal API', httpMethod);
				r.setStringParameterNoEscape('apikey', this.API_KEY);
				r.setStringParameterNoEscape('message', message);                    //Message must be matched by at least 1 template in TextLocal account
				r.setStringParameterNoEscape('sender', this.SMS_SENDER);             //Sender name choosen for the account
				r.setStringParameterNoEscape('numbers', numbers);                    //Comma separated numbers in a string format with country code. Ex: "919876543210, 91789654123"

				//set a MID server name if one wants to run the message on MID
				//r.setMIDServer('MY_MID_SERVER');

				var response = r.execute();
				var responseBody = response.getBody();
				var httpStatus = response.getStatusCode();

				var parsedResponseBody = JSON.parse(responseBody);
				if(parsedResponseBody.status == 'success'){
					var recipientNumbers = [];
					for (var rec in parsedResponseBody.messages){
						recipientNumbers.push(parsedResponseBody.messages[rec].recipient.toString());
					}	
					//Update 'x_277835_textlocal_textlocal_sms' table with the outgoing SMS details
					var grTxtlclSms = new GlideRecord('x_277835_textlocal_textlocal_sms');
					grTxtlclSms.initialize();
					grTxtlclSms.requested_user = gs.getUserID();
					grTxtlclSms.recipient_numbers = recipientNumbers.join(',');
					grTxtlclSms.sender_name = parsedResponseBody.message.sender.toString();
					grTxtlclSms.message = parsedResponseBody.message.content.toString();
					grTxtlclSms.action = 'outbox';
					grTxtlclSms.update();

					grTransactions.status = 'success';
					grTransactions.sent_sms = grTxtlclSms.sys_id;
				}
				else{
					grTransactions.status = 'failure';
				}
				
				grTransactions.response = JSON.stringify(responseBody);
				
				returnValue = responseBody;
			}
			catch(ex) {
				var errMessage = ex.message;
				gs.info(errMessage);
			}
		}
		
		grTransactions.update();
		return returnValue;
	},
	
	urlShortenerRequest : function(url){
		try {
			var r = new sn_ws.RESTMessageV2('x_277835_textlocal.TextLocal API', 'Create Short URL - POST');
			r.setStringParameterNoEscape('apikey', this.API_KEY);
			r.setStringParameterNoEscape('url', url);

			//set a MID server name if one wants to run the message on MID
			//r.setMIDServer('MY_MID_SERVER');

			var response = r.execute();
			var responseBody = JSON.parse(response.getBody());
			var httpStatus = response.getStatusCode();
			
			if(responseBody.status == 'success')
				return responseBody.shorturl;
			else
				return JSON.stringify(responseBody);
		}
		catch(ex) {
			var errMessage = ex.message;
			gs.info(errMessage);
		}
	},
	
	getSmsBalance : function(){
		try {
			var r = new sn_ws.RESTMessageV2('x_277835_textlocal.TextLocal API', 'Get Balance - POST');
			r.setStringParameterNoEscape('apikey', this.API_KEY);

			//set a MID server name if one wants to run the message on MID
			//r.setMIDServer('MY_MID_SERVER');

			var response = r.execute();
			var responseBody = JSON.parse(response.getBody());
			var httpStatus = response.getStatusCode();
			
			if(responseBody.status == 'success')
				return Number(responseBody.balance.sms.toString());
			else
				return JSON.stringify(responseBody);
		}
		catch(ex) {
			var errMessage = ex.message;
			gs.info(errMessage);
		}
	},
	
	getLastThirtyDaysOutboxSmsCount : function(){
		var grTxtLclSms = new GlideAggregate('x_277835_textlocal_textlocal_sms');
		grTxtLclSms.addEncodedQuery('sys_created_onONLast 30 days@javascript:gs.beginningOfLast30Days()@javascript:gs.endOfLast30Days()');
		grTxtLclSms.addQuery('action', 'outbox');
		grTxtLclSms.addAggregate('COUNT');
		grTxtLclSms.query();
		if(grTxtLclSms.next())
			return grTxtLclSms.getAggregate('COUNT');
		else
			return 0;
		
	},
	
	get30DaysChartData : function(){
		var count = {};
		count.blockedUnblockedCount = this.getLastThirtyDaysBlockedUnblockedCount();
		count.successFailureCount = this.getLastThirtyDaysSuccessFailureCount();
		
		return JSON.stringify(count);
	},
	
	getLastThirtyDaysBlockedUnblockedCount : function(){
		var count = {};
		
		var grTransactionsBlocked = new GlideAggregate('x_277835_textlocal_sms_transactions');
		grTransactionsBlocked.addEncodedQuery('sys_created_onONLast 30 days@javascript:gs.beginningOfLast30Days()@javascript:gs.endOfLast30Days()');
		grTransactionsBlocked.addQuery('blocked', true);
		grTransactionsBlocked.addAggregate('COUNT');
		grTransactionsBlocked.query();
		if(grTransactionsBlocked.next())
			count.blockedCount = grTransactionsBlocked.getAggregate('COUNT');
		else
			count.blockedCount = 0;
		
		var grTransactionsUnblocked = new GlideAggregate('x_277835_textlocal_sms_transactions');
		grTransactionsUnblocked.addEncodedQuery('sys_created_onONLast 30 days@javascript:gs.beginningOfLast30Days()@javascript:gs.endOfLast30Days()');
		grTransactionsUnblocked.addQuery('blocked', false);
		grTransactionsUnblocked.addAggregate('COUNT');
		grTransactionsUnblocked.query();
		if(grTransactionsUnblocked.next())
			count.unblockedCount = grTransactionsUnblocked.getAggregate('COUNT');
		else
			count.unblockedCount = 0;
		
		return count;
	},
	
	getLastThirtyDaysSuccessFailureCount : function(){
		var count = {};
		
		var grTransactionsSuccess = new GlideAggregate('x_277835_textlocal_sms_transactions');
		grTransactionsSuccess.addEncodedQuery('sys_created_onONLast 30 days@javascript:gs.beginningOfLast30Days()@javascript:gs.endOfLast30Days()');
		grTransactionsSuccess.addQuery('blocked', false);
		grTransactionsSuccess.addQuery('status', 'success');
		grTransactionsSuccess.addAggregate('COUNT');
		grTransactionsSuccess.query();
		if(grTransactionsSuccess.next())
			count.successCount = grTransactionsSuccess.getAggregate('COUNT');
		else
			count.successCount = 0;
		
		var grTransactionsFailure = new GlideAggregate('x_277835_textlocal_sms_transactions');
		grTransactionsFailure.addEncodedQuery('sys_created_onONLast 30 days@javascript:gs.beginningOfLast30Days()@javascript:gs.endOfLast30Days()');
		grTransactionsFailure.addQuery('blocked', false);
		grTransactionsFailure.addQuery('status', 'failure');
		grTransactionsFailure.addAggregate('COUNT');
		grTransactionsFailure.query();
		if(grTransactionsFailure.next())
			count.failureCount = grTransactionsFailure.getAggregate('COUNT');
		else
			count.failureCount = 0;
		
		return count;
	},

    type: 'TextLocalAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>abhrajyoti.kanrar</sys_created_by>
        <sys_created_on>2019-11-18 12:00:31</sys_created_on>
        <sys_id>f83d1bfbdbc9c0d058537de03c961980</sys_id>
        <sys_mod_count>37</sys_mod_count>
        <sys_name>TextLocalAPI</sys_name>
        <sys_package display_value="TextLocal" source="x_277835_textlocal">c8bcdf7bdbc9c0d058537de03c9619bb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="TextLocal">c8bcdf7bdbc9c0d058537de03c9619bb</sys_scope>
        <sys_update_name>sys_script_include_f83d1bfbdbc9c0d058537de03c961980</sys_update_name>
        <sys_updated_by>abhrajyoti.kanrar</sys_updated_by>
        <sys_updated_on>2019-11-22 11:43:16</sys_updated_on>
    </sys_script_include>
</record_update>
